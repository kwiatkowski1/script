Download Here ---> https://tinyurl.com/ycx3x5fn



Luau 


Luau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from Lua.


Motivation


Around 2006, Roblox started using Lua 5.1 as a scripting language for games. Over the years we ended up substantially evolving the implementation and the language; to support growing sophistication of games on the Roblox platform, growing team sizes and large internal teams writing a lot of code for application/editor (1+MLOC as of 2020), we had to invest in performance, ease of use and language tooling, and introduce a gradual type system to the language. More…


Sandboxing


Luau limits the set of standard libraries exposed to the users and implements extra sandboxing features to be able to run unprivileged code (written by our game developers) side by side with privileged code (written by us). This results in an execution environment that is different from what is commonplace in Lua. More…


Compatibility


Whenever possible, Luau aims to be backwards-compatible with Lua 5.1 and at the same time to incorporate features from later revisions of Lua. However, Luau is not a full superset of later versions of Lua - we do not always agree with Lua design decisions, and have different use cases and constraints. All post-5.1 Lua features, along with their support status in Luau, are documented here.


Syntax


Luau is syntactically backwards-compatible with Lua 5.1 (code that is valid Lua 5.1 is also valid Luau); however, we have extended the language with a set of syntactical features that make the language more familiar and ergonomic. The syntax is described here.


Analysis


To make it easier to write correct code, Luau comes with a set of analysis tools that can surface common mistakes. These consist of a linter and a type checker, colloquially known as script analysis, and are integrated into luau-analyze command line executable. The linting passes are described here, and the type checking user guide can be found here.


Performance


In addition to a completely custom front end that implements parsing, linting and type checking, Luau runtime features new bytecode, interpreter and compiler that are heavily tuned for performance. Luau currently does not implement Just-In-Time compilation, but its interpreter can be competitive with LuaJIT interpreter depending on the program. We continue to optimize the runtime and rewrite portions of it to be even more efficient. While our overall goal is to minimize the amount of time programmers spend tuning performance, some details about the performance characteristics are provided for inquisitive minds.


Libraries


As a language, Luau is a full superset of Lua 5.1. As far as standard library is concerned, some functions had to be removed from the builtin libraries, and some functions had to be added; refer to full documentation for details. When Luau is embedded into an application, the scripts normally get access to extra library features that are application-specific.


Getting Started


To get started with Luau you need to use luau command line binary to run your code and luau-analyze to run static analysis (including type checking and linting). You can download these from a recent release.


Creating a script


To create your own testing script, create a new file with .luau as the extension:


function ispositive(x) return x > 0 end print(ispositive(1)) print(ispositive("2")) function isfoo(a) return a == "foo" end print(isfoo("bar")) print(isfoo(1)) 


You can now run the file using luau test.luau and analyze it using luau-analyze test.luau .


Note that there are no warnings about calling ispositive() with a string, or calling isfoo() a number. This is because the type checking uses non-strict mode by default, which is lenient in how it infers types used by the program.


Type inference


Now modify the script to include --!strict at the top:


--!strict function ispositive(x) return x > 0 end print(ispositive(1)) print(ispositive("2")) 


In strict mode, Luau will infer types based on analysis of the code flow. There is also nonstrict mode, where analysis is more conservative and types are more frequently inferred as any to reduce cases where legitimate code is flagged with warnings.


In this case, Luau will use the return x > 0 statement to infer that ispositive() is a function taking a number and returning a boolean. Note that in this case, it was not necessary to add any explicit type annotations.


Based on Luau’s type inference, the analysis tool will now flag the incorrect call to ispositive() :


$ luau-analyze test.luau test.luau(7,18): TypeError: Type 'string' could not be converted into 'number' 


Annotations


You can add annotations to locals, arguments, and function return types. Among other things, annotations can help enforce that you don’t accidentally do something stupid. Here’s how we would add annotations to ispositive() :


--!strict function ispositive(x : number) : boolean return x > 0 end local result : boolean result = ispositive(1) 


Now we’ve told explicitly told Luau that ispositive() accepts a number and returns a boolean. This wasn’t strictly (pun intended) necessary in this case, because Luau’s inference was able to deduce this already. But even in this case, there are advantages to explicit annotations. Imagine that later we decide to change ispositive() to return a string value:


--!strict function ispositive(x : number) : boolean if x > 0 then return "yes" else return "no" end end local result : boolean result = ispositive(1) 


Oops – we’re returning string values, but we forgot to update the function return type. Since we’ve told Luau that ispositive() returns a boolean (and that’s how we’re using it), the call site isn’t flagged as an error. But because the annotation doesn’t match our code, we get a warning in the function body itself:


$ luau-analyze test.luau test.luau(5,9): TypeError: Type 'string' could not be converted into 'boolean' test.luau(7,9): TypeError: Type 'string' could not be converted into 'boolean' 


The fix is simple; just change the annotation to declare the return type as a string:


--!strict function ispositive(x : number) : string if x > 0 then return "yes" else return "no" end end local result : boolean result = ispositive(1) 


Well, almost - since we declared result as a boolean, the call site is now flagged:


$ luau-analyze test.luau test.luau(12,10): TypeError: Type 'string' could not be converted into 'boolean' 


If we update the type of the local variable, everything is good. Note that we could also just let Luau infer the type of result by changing it to the single line version local result = ispositive(1) .


--!strict function ispositive(x : number) : string if x > 0 then return "yes" else return "no" end end local result : string result = ispositive(1) 


Conclusions


This has been a brief tour of the basic functionality of Luau, but there’s lots more to explore. If you’re interested in reading more, check out our main reference pages for syntax and typechecking.


Roblox/luau


This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository.


Name already in use


A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch?


Sign In Required


Please sign in to use Codespaces.


Launching GitHub Desktop


If nothing happens, download GitHub Desktop and try again.


Launching GitHub Desktop


If nothing happens, download GitHub Desktop and try again.


Launching Xcode


If nothing happens, download Xcode and try again.


Launching Visual Studio Code


Your codespace will open once ready.


There was a problem preparing your codespace, please try again.


Latest commit


Git stats


Files


Failed to load latest commit information.


README.md 


Luau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from Lua.


It is designed to be backwards compatible with Lua 5.1, as well as incorporating some features from future Lua releases, but also expands the feature set (most notably with type annotations). Luau is largely implemented from scratch, with the language runtime being a very heavily modified version of Lua 5.1 runtime, with completely rewritten interpreter and other performance innovations. The runtime mostly preserves Lua 5.1 API, so existing bindings should be more or less compatible with a few caveats.


Luau is used by Roblox game developers to write game code, as well as by Roblox engineers to implement large parts of the user-facing application code as well as portions of the editor (Roblox Studio) as plugins. Roblox chose to open-source Luau to foster collaboration within the Roblox community as well as to allow other companies and communities to benefit from the ongoing language and runtime innovation.


This repository hosts source code for the language implementation and associated tooling, documentation for the language as well as RFCs and other materials. The documentation portion of this repository can be viewed at https://luau-lang.org/


Luau is an embeddable language, but it also comes with two command-line tools by default, luau and luau-analyze .


luau is a command-line REPL and can also run input files. Note that REPL runs in a sandboxed environment and as such doesn't have access to the underlying file system except for ability to require modules.


luau-analyze is a command-line type checker and linter; given a set of input files, it produces errors/warnings according to the file configuration, which can be customized by using --! comments in the files or .luaurc files. For details please refer to type checking and linting documentation.


You can install and run Luau by downloading the compiled binaries from a recent release; note that luau and luau-analyze binaries from the archives will need to be added to PATH or copied to a directory like /usr/local/bin on Linux/macOS.


Alternatively, you can use one of the packaged distributions (note that these are not maintained by Luau development team):



  
macOS: Install Homebrew and run brew install luau

  
Arch Linux: Run pacman -S luau

  
Alpine Linux: Enable community repositories and run apk add luau




After installing, you will want to validate the installation was successful by running the test case here.


On all platforms, you can use CMake to run the following commands to build Luau binaries from source:


mkdir cmake && cd cmake cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo cmake --build . --target Luau.Repl.CLI --config RelWithDebInfo cmake --build . --target Luau.Analyze.CLI --config RelWithDebInfo


Alternatively, on Linux/macOS you can use make :


make config=release luau luau-analyze


To integrate Luau into your CMake application projects as a library, at the minimum you'll need to depend on Luau.Compiler and Luau.VM projects. From there you need to create a new Luau state (using Lua 5.x API such as lua_newstate ), compile source to bytecode and load it into the VM like this:


// needs lua.h and luacode.h size_t bytecodeSize = 0; char* bytecode = luau_compile(source, strlen(source), NULL, &bytecodeSize); int result = luau_load(L, chunkname, bytecode, bytecodeSize, 0); free(bytecode); if (result == 0) return 1; /* return chunk main function */


For more details about the use of host API you currently need to consult Lua 5.x API. Luau closely tracks that API but has a few deviations, such as the need to compile source separately (which is important to be able to deploy VM without a compiler), or lack of __gc support (use lua_newuserdatadtor instead).


To gain advantage of many performance improvements it's highly recommended to use safeenv feature, which sandboxes individual scripts' global tables from each other as well as protects builtin libraries from monkey-patching. For this to work you need to call luaL_sandbox for the global state and luaL_sandboxthread for each new script's execution thread.


Luau has an internal test suite; in CMake builds it is split into two targets, Luau.UnitTest (for bytecode compiler and type checker/linter tests) and Luau.Conformance (for VM tests). The unit tests are written in C++, whereas the conformance tests are largely written in Luau (see tests/conformance ).


Makefile builds combine both into a single target and can be ran via make test .


Luau uses C++ as its implementation language. The runtime requires C++11, whereas the compiler and analysis components require C++17. It should build without issues using Microsoft Visual Studio 2017 or later, or gcc-7 or clang-7 or later.


Other than the STL/CRT, Luau library components don't have external dependencies. The test suite depends on doctest testing framework, and the REPL command-line depends on isocline.


Luau implementation is distributed under the terms of MIT License. It is based on Lua 5.x implementation that is MIT licensed as well.


When Luau is integrated into external projects, we ask to honor the license agreement and include Luau attribution into the user-facing product documentation. The attribution using Luau logo is also encouraged.


About


A fast, small, safe, gradually typed embeddable scripting language derived from Lua
